#!/bin/bash

#drop out if one of the commands should fail
set -e

#Create a working directory in order not to merge with the rest in the build directory
mkdir debian_package
cd debian_package

#Branch the source code we are just using. Nevermind that the .bzr is in...
#The local directory name has to follow the debian convention
# lowecasepackagenname_package.ver.sion
bzr branch ../../.. pugixml_@pugixml_VERSION@

rm pugixml_@pugixml_VERSION@/*.jam
#Debian convention: file has to end on .orig.tar.gz
tar -czf pugixml_@pugixml_VERSION@.orig.tar.gz  pugixml_@pugixml_VERSION@

#Copy the prepared debian packaging config files to the source code 
#directroy
cp -r ../../debian_from_template  pugixml_@pugixml_VERSION@/debian
cd pugixml_@pugixml_VERSION@

#The package versions for doocs / Ubuntu contain the codename of the distribution. Get it from the system.
CODENAME=`lsb_release -c | sed "{s/Codename:\s*//}"`

#Before building the package we will update the changelog. This is easier from a shell script
#because debchange does the right format and the current date, user name and email automatically for us.
#Use the NAME and EMAIL environment variables to get correct values if needed (usually the email is
# user@host instead of first.last@institute, for instance killenb@mskpcx18571.desy.de instead of martin.killenberg@desy.de).
debchange --package pugixml -v @pugixml_VERSION@-${CODENAME}1desy --distribution ${CODENAME} Debian package for Pugixml @Pugixml_VERSION@ \(DESY package with Findpugixml.cmake\)

#Now everything is prepared and we can actually build the package.
#If you have a gpg signature you can remove the -us and -uc flags and sign the package.
dpkg-buildpackage -rfakeroot -us -uc
